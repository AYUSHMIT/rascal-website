# Abstract Patterns

.Synopsis

Abstract patterns are a notation for pattern matching. Using patterns any value can be checked for a certain shape, and if it matches local variables can be bound to parts of the value.

.Syntax


|====
| Pattern              | Syntax                                                                      

| Literal              | <<Values-Boolean>>, <<Values-Integer>>, <<Values-Real>>, <<Values-Number>>, <<Values-String>>, <<Values-Location>>, or <<Values-DateTime>> 
| Variable declaration | `_Type_ _Var_`                                                              
| Multi-variable       | `*_Var_`, `*_Type_ _Var_`                                                   
| Variable             | `_Var_`                                                                     
| List                 | `[ _Pat~1~_, _Pat~2~_, ..., _Pat~n~_ ]`                                        
| Set                  | `{ _Pat~1~_, _Pat~2~_, ..., _Pat~n~_ }`                                        
| Tuple                | `< _Pat~1~_, _Pat~2~_, ..., _Pat~n~_ >`                                        
| Node                 | `_Name_ ( _Pat~1~_, _Pat~2~_, ..., _Pat~n~_ )`                                 
| Descendant           | `/ _Pat_`                                                                   
| Labelled             | `_Var_ : _Pat_`                                                              
| TypedLabelled        | `_Type_ _Var_ : _Pat_`                                                      
| TypeConstrained      |  `[_Type_] _Pat_`                                                           
|====

.Types

.Function

.Details

.Description
An abstract pattern is recursively defined and may contain the following elements:
loctoc::[1]

.Examples

.Benefits

.Pitfalls
Map patterns are not (yet?) supported.

