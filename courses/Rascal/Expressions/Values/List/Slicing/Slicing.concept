Name: Slicing

Synopsis: Retrieve a slice of a list.

Syntax:
# `$Exp_1$ [ $Exp_2$ .. $Exp_4$]`
# `$Exp_1$ [ $Exp_2$ , $Exp3$ .. $Exp_4$]`


where $Exp_2$ and $Exp_4$ are optional.

Types:
| `$Exp_1$`     | `$Exp_2$` |  `$Exp_3$`  | `$Exp_4$` | `$Exp_1$ [ $Exp_2$ .. $Exp_4$ ]`   or  `$Exp_1$ [ $Exp_2$ , $Exp_3$ .. $Exp_4$]` |
|:--------------|:----------|:------------|-----------|-------------------------------------------------------------------------------|
| `list[$T_1$]` | `int`     | `int`       | `int`     |  `list[$T_1$]`                                                                |

Function:

Details:

Description:
List slicing uses the integer values of $Exp_2$ and $Exp_4$ to determine the `begin` (__inclusive__) and `end` (__exclusive__)
of a slice from the list value $L$ of $Exp_1$. Negative indices count from the end of the list backwards.
Using the second form, an extra index $Exp_3$ is given that determines the
index of the second element in the slice and establishes the `step` between
successive elements in the slice. The default `step` is 1.
If `end` is smaller than `begin`, the slice is constructed backwards.

Let `Len` be the length of $L$ and let $N_2$, $N_3$ and $N_4$ be the respective values of the expressions
 $Exp_2$, $Exp_2$ and $Exp_2$ when they are present.

The slice parameters `begin`, `end`, and `step` are determined as follows:
* $Exp_2$:
  ** If $Exp_2$ is absent, then `begin = 0`.
  ** Otherwise, if $N_2$ >= 0 then `begin = $N_2$` else `begin = $N_2$ + $Len$`. 
* $Exp_4$:
  ** If $Exp_4$ is absent, then `end = $Len$`.
  ** Otherwise, if $N_4$ >= 0, then `end = $N_4$` else `end = $N_4$ + $Len$`.
* $Exp_3$:
  ** If $Exp_3$ is absent, then if `begin < end` then `step = 1` else `step = -1`.
  ** Otherwise, if `begin < end`, then `step = $N_3$ - begin` else `step = begin - $N_3$`.


Now, the constraints `0 <= begin < Len` and `0 < end < Len` should hold,
otherwise the exception `IndexOutOfBounds` is thrown.

The slice consists of the elements `L[begin]`, `L[begin+step]`, `L[end - step]`.
When `begin >= end`, the elements are listed in reverse order.

Examples:
Consider the list `L = [0, 10, 20, 30, 40, 50, 60, 70];` as running example.

Here is a view on $L$ that will help to correlate positive and negative indices:


|`$i$`        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
|:------------|---|---|---|---|---|---|---|---|---|
|`L[$i$]`     | 0 | 10| 20| 30| 40| 50| 60| 70|80 |
|`-$i$`       | -9| -8| -7| -6| -5| -3| -4| -2| -1|



Some common use cases (with `begin` <= `end`):


| Slice           | Means:                                                     |
|:----------------|:-----------------------------------------------------------|
| `L[begin..end]` | elements with indices `begin` through `end-1`              |
| `L[begin..]`    | elements with indices `begin` through the rest of the list |
| `L[..end]`      | elements with indices from the beginning through `end-1`   |
| `L[..]`         | the whole list                                             |
| `L[-1]`         | last element of the list                                   |
| `L[-2..]`       | the last two elements of the list                          |
| `L[..-2]`       | all elements except the last two.                          |


Let's put this into practice now.

<screen errors>
L = [0, 10, 20, 30, 40, 50, 60, 70];
// Slices with begin < end
L[1..3];
L[1..];       // empty end => end of list
L[..3];       // empty begin => first element of list
L[..];        // both empty => whole list
// Slices with  begin >= end
L[3..1];      // slice contains elements with indices 3 and 2 (in that order)
L[3..3];      // empty slice when begin == end
// Slices with negative begin or end:
L[2..-2];     // equivalent to L[2..6]
L[2..6];
L[-4..-2];    // equivalent to L[4..6]
L[4..6];
// Slices with an explicit second index:
L[1,3..6];
L[5,3..];
// Explore error cases:
L[..10];
L[1..20];
</screen>



       