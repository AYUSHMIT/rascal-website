# Comprehension

.Synopsis
A set comprehension generates a set value.

.Syntax
`{ _Exp_~1~, _Exp_~2~, ... | _Gen_~1~, _Gen_~2~, ... }`

.Types
|====
| `$Exp_1$` | `$Exp_2$` | ... | `{ $Exp_1$, $Exp_2$, ... | $Gen_1$, $Gen_2$, ... }` |
|:----------|:----------|:----|:-----------------------------------------------------|
| `$T_1$`   | `$T_2$`   | ... | `set[ lub( $T_1$, $T_2$, ... ) ]`                   |
|====

.Function

.Details

.Description
A set comprehension consists of a number of contributing expressions _Exp_~1~, _Exp_~2~, ... and a number of
generators _Gen_~1~, _Gen_~2~, _Gen_~3~, ... that are evaluated as described in <<Expressions-Comprehensions>>.

.Examples
[source,rascal-shell]
----
{ N * N | int N <- [0 .. 10]};
{ N * N | int N <- [0 .. 10], N % 3 == 0};
----

.Benefits

.Pitfalls

