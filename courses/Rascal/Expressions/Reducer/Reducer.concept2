# Reducer

.Synopsis
Reduce generated values to a single value.

.Syntax
`( _Exp_ | _RedExp_ | _Gen_~1~, _Gen_~1~, ... )`

.Types

.Function

.Details

.Description
A reducer resembles the http://en.wikipedia.org/wiki/Fold_(higher-order_function)[fold] function
found in most functional languages.

A reducer is equivalent to the following code:
[source,rascal]
----
it = $Exp$; /*1*/
for($Gen_1$, $Gen_1$, ... ) /*2*/
    it = $RedExp$; /*3*/
it; /*4*/
----
and is executed as follows:

*  A fresh variable `it` is initialized with $Exp$ (/*1*/). 
  We call the variable `it` since we use `it` to initialize the reducer, to make changes to `i`t, and to return `it` as result.
*  A for loop iterates over all values produced by the generators `$Gen_1$`, `$Gen_1$`, ... (/*2*/).
*  In the body of the loop, variable `it` is updated to reflect a new reduced value (/*3*/).
  Note that `it` itself and variables introduced in _Gen_~1~, _Gen_~1~, ... may occur in _RedExp_.
*  The value of `it` is the result of the reducer.

.Examples
[source,rascal-shell]
----
L = [1, 3, 5, 7];
(0 | it + e | int e <- L);
(1 | it * e | int e <- L);
----

.Benefits

.Pitfalls

